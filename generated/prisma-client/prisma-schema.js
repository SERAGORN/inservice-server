module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBoughHistory {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateSoldHistory {
  count: Int!
}

type AggregateTender {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BoughHistory {
  id: ID!
  service: Service
  user: User
}

type BoughHistoryConnection {
  pageInfo: PageInfo!
  edges: [BoughHistoryEdge]!
  aggregate: AggregateBoughHistory!
}

input BoughHistoryCreateInput {
  id: ID
  service: ServiceCreateOneInput
  user: UserCreateOneWithoutBoughHistoryInput
}

input BoughHistoryCreateManyWithoutUserInput {
  create: [BoughHistoryCreateWithoutUserInput!]
  connect: [BoughHistoryWhereUniqueInput!]
}

input BoughHistoryCreateWithoutUserInput {
  id: ID
  service: ServiceCreateOneInput
}

type BoughHistoryEdge {
  node: BoughHistory!
  cursor: String!
}

enum BoughHistoryOrderByInput {
  id_ASC
  id_DESC
}

type BoughHistoryPreviousValues {
  id: ID!
}

input BoughHistoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [BoughHistoryScalarWhereInput!]
  OR: [BoughHistoryScalarWhereInput!]
  NOT: [BoughHistoryScalarWhereInput!]
}

type BoughHistorySubscriptionPayload {
  mutation: MutationType!
  node: BoughHistory
  updatedFields: [String!]
  previousValues: BoughHistoryPreviousValues
}

input BoughHistorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoughHistoryWhereInput
  AND: [BoughHistorySubscriptionWhereInput!]
  OR: [BoughHistorySubscriptionWhereInput!]
  NOT: [BoughHistorySubscriptionWhereInput!]
}

input BoughHistoryUpdateInput {
  service: ServiceUpdateOneInput
  user: UserUpdateOneWithoutBoughHistoryInput
}

input BoughHistoryUpdateManyWithoutUserInput {
  create: [BoughHistoryCreateWithoutUserInput!]
  delete: [BoughHistoryWhereUniqueInput!]
  connect: [BoughHistoryWhereUniqueInput!]
  set: [BoughHistoryWhereUniqueInput!]
  disconnect: [BoughHistoryWhereUniqueInput!]
  update: [BoughHistoryUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [BoughHistoryUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [BoughHistoryScalarWhereInput!]
}

input BoughHistoryUpdateWithoutUserDataInput {
  service: ServiceUpdateOneInput
}

input BoughHistoryUpdateWithWhereUniqueWithoutUserInput {
  where: BoughHistoryWhereUniqueInput!
  data: BoughHistoryUpdateWithoutUserDataInput!
}

input BoughHistoryUpsertWithWhereUniqueWithoutUserInput {
  where: BoughHistoryWhereUniqueInput!
  update: BoughHistoryUpdateWithoutUserDataInput!
  create: BoughHistoryCreateWithoutUserInput!
}

input BoughHistoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  service: ServiceWhereInput
  user: UserWhereInput
  AND: [BoughHistoryWhereInput!]
  OR: [BoughHistoryWhereInput!]
  NOT: [BoughHistoryWhereInput!]
}

input BoughHistoryWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  title: String!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  title: String!
  services: ServiceCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutServicesInput {
  create: CategoryCreateWithoutServicesInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutServicesInput {
  id: ID
  title: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type CategoryPreviousValues {
  id: ID!
  title: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  title: String
  services: ServiceUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  title: String
}

input CategoryUpdateOneWithoutServicesInput {
  create: CategoryCreateWithoutServicesInput
  update: CategoryUpdateWithoutServicesDataInput
  upsert: CategoryUpsertWithoutServicesInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutServicesDataInput {
  title: String
}

input CategoryUpsertWithoutServicesInput {
  update: CategoryUpdateWithoutServicesDataInput!
  create: CategoryCreateWithoutServicesInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  services_every: ServiceWhereInput
  services_some: ServiceWhereInput
  services_none: ServiceWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  message: String!
  user: User
  service: Service
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  message: String!
  user: UserCreateOneInput
  service: ServiceCreateOneWithoutCommentsInput
}

input CommentCreateManyWithoutServiceInput {
  create: [CommentCreateWithoutServiceInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutServiceInput {
  id: ID
  message: String!
  user: UserCreateOneInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
}

type CommentPreviousValues {
  id: ID!
  message: String!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  message: String
  user: UserUpdateOneInput
  service: ServiceUpdateOneWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  message: String
}

input CommentUpdateManyMutationInput {
  message: String
}

input CommentUpdateManyWithoutServiceInput {
  create: [CommentCreateWithoutServiceInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutServiceInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutServiceInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutServiceDataInput {
  message: String
  user: UserUpdateOneInput
}

input CommentUpdateWithWhereUniqueWithoutServiceInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutServiceDataInput!
}

input CommentUpsertWithWhereUniqueWithoutServiceInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutServiceDataInput!
  create: CommentCreateWithoutServiceInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  user: UserWhereInput
  service: ServiceWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBoughHistory(data: BoughHistoryCreateInput!): BoughHistory!
  updateBoughHistory(data: BoughHistoryUpdateInput!, where: BoughHistoryWhereUniqueInput!): BoughHistory
  upsertBoughHistory(where: BoughHistoryWhereUniqueInput!, create: BoughHistoryCreateInput!, update: BoughHistoryUpdateInput!): BoughHistory!
  deleteBoughHistory(where: BoughHistoryWhereUniqueInput!): BoughHistory
  deleteManyBoughHistories(where: BoughHistoryWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createService(data: ServiceCreateInput!): Service!
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateManyServices(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): BatchPayload!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  createSoldHistory(data: SoldHistoryCreateInput!): SoldHistory!
  updateSoldHistory(data: SoldHistoryUpdateInput!, where: SoldHistoryWhereUniqueInput!): SoldHistory
  upsertSoldHistory(where: SoldHistoryWhereUniqueInput!, create: SoldHistoryCreateInput!, update: SoldHistoryUpdateInput!): SoldHistory!
  deleteSoldHistory(where: SoldHistoryWhereUniqueInput!): SoldHistory
  deleteManySoldHistories(where: SoldHistoryWhereInput): BatchPayload!
  createTender(data: TenderCreateInput!): Tender!
  updateTender(data: TenderUpdateInput!, where: TenderWhereUniqueInput!): Tender
  updateManyTenders(data: TenderUpdateManyMutationInput!, where: TenderWhereInput): BatchPayload!
  upsertTender(where: TenderWhereUniqueInput!, create: TenderCreateInput!, update: TenderUpdateInput!): Tender!
  deleteTender(where: TenderWhereUniqueInput!): Tender
  deleteManyTenders(where: TenderWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  boughHistory(where: BoughHistoryWhereUniqueInput!): BoughHistory
  boughHistories(where: BoughHistoryWhereInput, orderBy: BoughHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BoughHistory]!
  boughHistoriesConnection(where: BoughHistoryWhereInput, orderBy: BoughHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoughHistoryConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  soldHistory(where: SoldHistoryWhereUniqueInput!): SoldHistory
  soldHistories(where: SoldHistoryWhereInput, orderBy: SoldHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SoldHistory]!
  soldHistoriesConnection(where: SoldHistoryWhereInput, orderBy: SoldHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SoldHistoryConnection!
  tender(where: TenderWhereUniqueInput!): Tender
  tenders(where: TenderWhereInput, orderBy: TenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tender]!
  tendersConnection(where: TenderWhereInput, orderBy: TenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TenderConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Service {
  id: ID!
  title: String!
  description: String!
  address: String!
  price: Int!
  done: Boolean!
  timeToDo: String!
  created: String!
  tenders(where: TenderWhereInput, orderBy: TenderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tender!]
  user: User
  category: Category
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  id: ID
  title: String!
  description: String!
  address: String!
  price: Int!
  done: Boolean
  timeToDo: String!
  created: String!
  tenders: TenderCreateManyWithoutServiceInput
  user: UserCreateOneWithoutServicesInput
  category: CategoryCreateOneWithoutServicesInput
  comments: CommentCreateManyWithoutServiceInput
}

input ServiceCreateManyWithoutCategoryInput {
  create: [ServiceCreateWithoutCategoryInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ServiceCreateManyWithoutUserInput {
  create: [ServiceCreateWithoutUserInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ServiceCreateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateOneWithoutCommentsInput {
  create: ServiceCreateWithoutCommentsInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateOneWithoutTendersInput {
  create: ServiceCreateWithoutTendersInput
  connect: ServiceWhereUniqueInput
}

input ServiceCreateWithoutCategoryInput {
  id: ID
  title: String!
  description: String!
  address: String!
  price: Int!
  done: Boolean
  timeToDo: String!
  created: String!
  tenders: TenderCreateManyWithoutServiceInput
  user: UserCreateOneWithoutServicesInput
  comments: CommentCreateManyWithoutServiceInput
}

input ServiceCreateWithoutCommentsInput {
  id: ID
  title: String!
  description: String!
  address: String!
  price: Int!
  done: Boolean
  timeToDo: String!
  created: String!
  tenders: TenderCreateManyWithoutServiceInput
  user: UserCreateOneWithoutServicesInput
  category: CategoryCreateOneWithoutServicesInput
}

input ServiceCreateWithoutTendersInput {
  id: ID
  title: String!
  description: String!
  address: String!
  price: Int!
  done: Boolean
  timeToDo: String!
  created: String!
  user: UserCreateOneWithoutServicesInput
  category: CategoryCreateOneWithoutServicesInput
  comments: CommentCreateManyWithoutServiceInput
}

input ServiceCreateWithoutUserInput {
  id: ID
  title: String!
  description: String!
  address: String!
  price: Int!
  done: Boolean
  timeToDo: String!
  created: String!
  tenders: TenderCreateManyWithoutServiceInput
  category: CategoryCreateOneWithoutServicesInput
  comments: CommentCreateManyWithoutServiceInput
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  address_ASC
  address_DESC
  price_ASC
  price_DESC
  done_ASC
  done_DESC
  timeToDo_ASC
  timeToDo_DESC
  created_ASC
  created_DESC
}

type ServicePreviousValues {
  id: ID!
  title: String!
  description: String!
  address: String!
  price: Int!
  done: Boolean!
  timeToDo: String!
  created: String!
}

input ServiceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  done: Boolean
  done_not: Boolean
  timeToDo: String
  timeToDo_not: String
  timeToDo_in: [String!]
  timeToDo_not_in: [String!]
  timeToDo_lt: String
  timeToDo_lte: String
  timeToDo_gt: String
  timeToDo_gte: String
  timeToDo_contains: String
  timeToDo_not_contains: String
  timeToDo_starts_with: String
  timeToDo_not_starts_with: String
  timeToDo_ends_with: String
  timeToDo_not_ends_with: String
  created: String
  created_not: String
  created_in: [String!]
  created_not_in: [String!]
  created_lt: String
  created_lte: String
  created_gt: String
  created_gte: String
  created_contains: String
  created_not_contains: String
  created_starts_with: String
  created_not_starts_with: String
  created_ends_with: String
  created_not_ends_with: String
  AND: [ServiceScalarWhereInput!]
  OR: [ServiceScalarWhereInput!]
  NOT: [ServiceScalarWhereInput!]
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  NOT: [ServiceSubscriptionWhereInput!]
}

input ServiceUpdateDataInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
  tenders: TenderUpdateManyWithoutServiceInput
  user: UserUpdateOneWithoutServicesInput
  category: CategoryUpdateOneWithoutServicesInput
  comments: CommentUpdateManyWithoutServiceInput
}

input ServiceUpdateInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
  tenders: TenderUpdateManyWithoutServiceInput
  user: UserUpdateOneWithoutServicesInput
  category: CategoryUpdateOneWithoutServicesInput
  comments: CommentUpdateManyWithoutServiceInput
}

input ServiceUpdateManyDataInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
}

input ServiceUpdateManyMutationInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
}

input ServiceUpdateManyWithoutCategoryInput {
  create: [ServiceCreateWithoutCategoryInput!]
  delete: [ServiceWhereUniqueInput!]
  connect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  disconnect: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ServiceScalarWhereInput!]
  updateMany: [ServiceUpdateManyWithWhereNestedInput!]
}

input ServiceUpdateManyWithoutUserInput {
  create: [ServiceCreateWithoutUserInput!]
  delete: [ServiceWhereUniqueInput!]
  connect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  disconnect: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ServiceScalarWhereInput!]
  updateMany: [ServiceUpdateManyWithWhereNestedInput!]
}

input ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput!
  data: ServiceUpdateManyDataInput!
}

input ServiceUpdateOneInput {
  create: ServiceCreateInput
  update: ServiceUpdateDataInput
  upsert: ServiceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateOneWithoutCommentsInput {
  create: ServiceCreateWithoutCommentsInput
  update: ServiceUpdateWithoutCommentsDataInput
  upsert: ServiceUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateOneWithoutTendersInput {
  create: ServiceCreateWithoutTendersInput
  update: ServiceUpdateWithoutTendersDataInput
  upsert: ServiceUpsertWithoutTendersInput
  delete: Boolean
  disconnect: Boolean
  connect: ServiceWhereUniqueInput
}

input ServiceUpdateWithoutCategoryDataInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
  tenders: TenderUpdateManyWithoutServiceInput
  user: UserUpdateOneWithoutServicesInput
  comments: CommentUpdateManyWithoutServiceInput
}

input ServiceUpdateWithoutCommentsDataInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
  tenders: TenderUpdateManyWithoutServiceInput
  user: UserUpdateOneWithoutServicesInput
  category: CategoryUpdateOneWithoutServicesInput
}

input ServiceUpdateWithoutTendersDataInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
  user: UserUpdateOneWithoutServicesInput
  category: CategoryUpdateOneWithoutServicesInput
  comments: CommentUpdateManyWithoutServiceInput
}

input ServiceUpdateWithoutUserDataInput {
  title: String
  description: String
  address: String
  price: Int
  done: Boolean
  timeToDo: String
  created: String
  tenders: TenderUpdateManyWithoutServiceInput
  category: CategoryUpdateOneWithoutServicesInput
  comments: CommentUpdateManyWithoutServiceInput
}

input ServiceUpdateWithWhereUniqueWithoutCategoryInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutCategoryDataInput!
}

input ServiceUpdateWithWhereUniqueWithoutUserInput {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateWithoutUserDataInput!
}

input ServiceUpsertNestedInput {
  update: ServiceUpdateDataInput!
  create: ServiceCreateInput!
}

input ServiceUpsertWithoutCommentsInput {
  update: ServiceUpdateWithoutCommentsDataInput!
  create: ServiceCreateWithoutCommentsInput!
}

input ServiceUpsertWithoutTendersInput {
  update: ServiceUpdateWithoutTendersDataInput!
  create: ServiceCreateWithoutTendersInput!
}

input ServiceUpsertWithWhereUniqueWithoutCategoryInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutCategoryDataInput!
  create: ServiceCreateWithoutCategoryInput!
}

input ServiceUpsertWithWhereUniqueWithoutUserInput {
  where: ServiceWhereUniqueInput!
  update: ServiceUpdateWithoutUserDataInput!
  create: ServiceCreateWithoutUserInput!
}

input ServiceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  done: Boolean
  done_not: Boolean
  timeToDo: String
  timeToDo_not: String
  timeToDo_in: [String!]
  timeToDo_not_in: [String!]
  timeToDo_lt: String
  timeToDo_lte: String
  timeToDo_gt: String
  timeToDo_gte: String
  timeToDo_contains: String
  timeToDo_not_contains: String
  timeToDo_starts_with: String
  timeToDo_not_starts_with: String
  timeToDo_ends_with: String
  timeToDo_not_ends_with: String
  created: String
  created_not: String
  created_in: [String!]
  created_not_in: [String!]
  created_lt: String
  created_lte: String
  created_gt: String
  created_gte: String
  created_contains: String
  created_not_contains: String
  created_starts_with: String
  created_not_starts_with: String
  created_ends_with: String
  created_not_ends_with: String
  tenders_every: TenderWhereInput
  tenders_some: TenderWhereInput
  tenders_none: TenderWhereInput
  user: UserWhereInput
  category: CategoryWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
}

input ServiceWhereUniqueInput {
  id: ID
}

type SoldHistory {
  id: ID!
  service: Service
  user: User
}

type SoldHistoryConnection {
  pageInfo: PageInfo!
  edges: [SoldHistoryEdge]!
  aggregate: AggregateSoldHistory!
}

input SoldHistoryCreateInput {
  id: ID
  service: ServiceCreateOneInput
  user: UserCreateOneWithoutSoldHistoryInput
}

input SoldHistoryCreateManyWithoutUserInput {
  create: [SoldHistoryCreateWithoutUserInput!]
  connect: [SoldHistoryWhereUniqueInput!]
}

input SoldHistoryCreateWithoutUserInput {
  id: ID
  service: ServiceCreateOneInput
}

type SoldHistoryEdge {
  node: SoldHistory!
  cursor: String!
}

enum SoldHistoryOrderByInput {
  id_ASC
  id_DESC
}

type SoldHistoryPreviousValues {
  id: ID!
}

input SoldHistoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [SoldHistoryScalarWhereInput!]
  OR: [SoldHistoryScalarWhereInput!]
  NOT: [SoldHistoryScalarWhereInput!]
}

type SoldHistorySubscriptionPayload {
  mutation: MutationType!
  node: SoldHistory
  updatedFields: [String!]
  previousValues: SoldHistoryPreviousValues
}

input SoldHistorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SoldHistoryWhereInput
  AND: [SoldHistorySubscriptionWhereInput!]
  OR: [SoldHistorySubscriptionWhereInput!]
  NOT: [SoldHistorySubscriptionWhereInput!]
}

input SoldHistoryUpdateInput {
  service: ServiceUpdateOneInput
  user: UserUpdateOneWithoutSoldHistoryInput
}

input SoldHistoryUpdateManyWithoutUserInput {
  create: [SoldHistoryCreateWithoutUserInput!]
  delete: [SoldHistoryWhereUniqueInput!]
  connect: [SoldHistoryWhereUniqueInput!]
  set: [SoldHistoryWhereUniqueInput!]
  disconnect: [SoldHistoryWhereUniqueInput!]
  update: [SoldHistoryUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SoldHistoryUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SoldHistoryScalarWhereInput!]
}

input SoldHistoryUpdateWithoutUserDataInput {
  service: ServiceUpdateOneInput
}

input SoldHistoryUpdateWithWhereUniqueWithoutUserInput {
  where: SoldHistoryWhereUniqueInput!
  data: SoldHistoryUpdateWithoutUserDataInput!
}

input SoldHistoryUpsertWithWhereUniqueWithoutUserInput {
  where: SoldHistoryWhereUniqueInput!
  update: SoldHistoryUpdateWithoutUserDataInput!
  create: SoldHistoryCreateWithoutUserInput!
}

input SoldHistoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  service: ServiceWhereInput
  user: UserWhereInput
  AND: [SoldHistoryWhereInput!]
  OR: [SoldHistoryWhereInput!]
  NOT: [SoldHistoryWhereInput!]
}

input SoldHistoryWhereUniqueInput {
  id: ID
}

type Subscription {
  boughHistory(where: BoughHistorySubscriptionWhereInput): BoughHistorySubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  soldHistory(where: SoldHistorySubscriptionWhereInput): SoldHistorySubscriptionPayload
  tender(where: TenderSubscriptionWhereInput): TenderSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tender {
  id: ID!
  service: Service
  price: Int!
  user: User
  comment: String!
  accept: Boolean!
}

type TenderConnection {
  pageInfo: PageInfo!
  edges: [TenderEdge]!
  aggregate: AggregateTender!
}

input TenderCreateInput {
  id: ID
  service: ServiceCreateOneWithoutTendersInput
  price: Int!
  user: UserCreateOneInput
  comment: String!
  accept: Boolean
}

input TenderCreateManyWithoutServiceInput {
  create: [TenderCreateWithoutServiceInput!]
  connect: [TenderWhereUniqueInput!]
}

input TenderCreateWithoutServiceInput {
  id: ID
  price: Int!
  user: UserCreateOneInput
  comment: String!
  accept: Boolean
}

type TenderEdge {
  node: Tender!
  cursor: String!
}

enum TenderOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  comment_ASC
  comment_DESC
  accept_ASC
  accept_DESC
}

type TenderPreviousValues {
  id: ID!
  price: Int!
  comment: String!
  accept: Boolean!
}

input TenderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  accept: Boolean
  accept_not: Boolean
  AND: [TenderScalarWhereInput!]
  OR: [TenderScalarWhereInput!]
  NOT: [TenderScalarWhereInput!]
}

type TenderSubscriptionPayload {
  mutation: MutationType!
  node: Tender
  updatedFields: [String!]
  previousValues: TenderPreviousValues
}

input TenderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TenderWhereInput
  AND: [TenderSubscriptionWhereInput!]
  OR: [TenderSubscriptionWhereInput!]
  NOT: [TenderSubscriptionWhereInput!]
}

input TenderUpdateInput {
  service: ServiceUpdateOneWithoutTendersInput
  price: Int
  user: UserUpdateOneInput
  comment: String
  accept: Boolean
}

input TenderUpdateManyDataInput {
  price: Int
  comment: String
  accept: Boolean
}

input TenderUpdateManyMutationInput {
  price: Int
  comment: String
  accept: Boolean
}

input TenderUpdateManyWithoutServiceInput {
  create: [TenderCreateWithoutServiceInput!]
  delete: [TenderWhereUniqueInput!]
  connect: [TenderWhereUniqueInput!]
  set: [TenderWhereUniqueInput!]
  disconnect: [TenderWhereUniqueInput!]
  update: [TenderUpdateWithWhereUniqueWithoutServiceInput!]
  upsert: [TenderUpsertWithWhereUniqueWithoutServiceInput!]
  deleteMany: [TenderScalarWhereInput!]
  updateMany: [TenderUpdateManyWithWhereNestedInput!]
}

input TenderUpdateManyWithWhereNestedInput {
  where: TenderScalarWhereInput!
  data: TenderUpdateManyDataInput!
}

input TenderUpdateWithoutServiceDataInput {
  price: Int
  user: UserUpdateOneInput
  comment: String
  accept: Boolean
}

input TenderUpdateWithWhereUniqueWithoutServiceInput {
  where: TenderWhereUniqueInput!
  data: TenderUpdateWithoutServiceDataInput!
}

input TenderUpsertWithWhereUniqueWithoutServiceInput {
  where: TenderWhereUniqueInput!
  update: TenderUpdateWithoutServiceDataInput!
  create: TenderCreateWithoutServiceInput!
}

input TenderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  service: ServiceWhereInput
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  user: UserWhereInput
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  accept: Boolean
  accept_not: Boolean
  AND: [TenderWhereInput!]
  OR: [TenderWhereInput!]
  NOT: [TenderWhereInput!]
}

input TenderWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String
  phone: String!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service!]
  soldHistory(where: SoldHistoryWhereInput, orderBy: SoldHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SoldHistory!]
  boughHistory(where: BoughHistoryWhereInput, orderBy: BoughHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BoughHistory!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String
  phone: String!
  services: ServiceCreateManyWithoutUserInput
  soldHistory: SoldHistoryCreateManyWithoutUserInput
  boughHistory: BoughHistoryCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutBoughHistoryInput {
  create: UserCreateWithoutBoughHistoryInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutServicesInput {
  create: UserCreateWithoutServicesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSoldHistoryInput {
  create: UserCreateWithoutSoldHistoryInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBoughHistoryInput {
  id: ID
  name: String!
  email: String
  phone: String!
  services: ServiceCreateManyWithoutUserInput
  soldHistory: SoldHistoryCreateManyWithoutUserInput
}

input UserCreateWithoutServicesInput {
  id: ID
  name: String!
  email: String
  phone: String!
  soldHistory: SoldHistoryCreateManyWithoutUserInput
  boughHistory: BoughHistoryCreateManyWithoutUserInput
}

input UserCreateWithoutSoldHistoryInput {
  id: ID
  name: String!
  email: String
  phone: String!
  services: ServiceCreateManyWithoutUserInput
  boughHistory: BoughHistoryCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String
  phone: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  phone: String
  services: ServiceUpdateManyWithoutUserInput
  soldHistory: SoldHistoryUpdateManyWithoutUserInput
  boughHistory: BoughHistoryUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  services: ServiceUpdateManyWithoutUserInput
  soldHistory: SoldHistoryUpdateManyWithoutUserInput
  boughHistory: BoughHistoryUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  phone: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutBoughHistoryInput {
  create: UserCreateWithoutBoughHistoryInput
  update: UserUpdateWithoutBoughHistoryDataInput
  upsert: UserUpsertWithoutBoughHistoryInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutServicesInput {
  create: UserCreateWithoutServicesInput
  update: UserUpdateWithoutServicesDataInput
  upsert: UserUpsertWithoutServicesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSoldHistoryInput {
  create: UserCreateWithoutSoldHistoryInput
  update: UserUpdateWithoutSoldHistoryDataInput
  upsert: UserUpsertWithoutSoldHistoryInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBoughHistoryDataInput {
  name: String
  email: String
  phone: String
  services: ServiceUpdateManyWithoutUserInput
  soldHistory: SoldHistoryUpdateManyWithoutUserInput
}

input UserUpdateWithoutServicesDataInput {
  name: String
  email: String
  phone: String
  soldHistory: SoldHistoryUpdateManyWithoutUserInput
  boughHistory: BoughHistoryUpdateManyWithoutUserInput
}

input UserUpdateWithoutSoldHistoryDataInput {
  name: String
  email: String
  phone: String
  services: ServiceUpdateManyWithoutUserInput
  boughHistory: BoughHistoryUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutBoughHistoryInput {
  update: UserUpdateWithoutBoughHistoryDataInput!
  create: UserCreateWithoutBoughHistoryInput!
}

input UserUpsertWithoutServicesInput {
  update: UserUpdateWithoutServicesDataInput!
  create: UserCreateWithoutServicesInput!
}

input UserUpsertWithoutSoldHistoryInput {
  update: UserUpdateWithoutSoldHistoryDataInput!
  create: UserCreateWithoutSoldHistoryInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  services_every: ServiceWhereInput
  services_some: ServiceWhereInput
  services_none: ServiceWhereInput
  soldHistory_every: SoldHistoryWhereInput
  soldHistory_some: SoldHistoryWhereInput
  soldHistory_none: SoldHistoryWhereInput
  boughHistory_every: BoughHistoryWhereInput
  boughHistory_some: BoughHistoryWhereInput
  boughHistory_none: BoughHistoryWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    